import { HttpService } from '@nestjs/axios';
import { GeneralInfoDto } from '../dto/general-info.dto';
import { ReturnLeagueSearch } from '../interfaces/league.interface';
import { LeagueOverallStatsDto } from '../dto/league-overall-stats.dto';
import { ReturnDetailStats, ReturnGeneralStats } from '../interfaces/stats.interface';
import { LeagueFixtureDto } from '../dto/league-fixture.dto';
import { LeagueDetailStatsDto } from '../dto/league-detail-stats.dto';
import { SeasonOfLeague } from '../interfaces/season.interface';
import { LeagueGeneralStatsDto } from '../dto/league-general-stats.dto';
import { SearchDto } from '../dto/search.dto';
import { SeasonsOfLeagueDto } from '../dto/seasons-of-league.dto';
import { LeagueSeasonDto } from "../dto/leagueSeason.dto";
import { LeagueSeasonDatesDto } from "../dto/league-season-dates.dto";
import { LeagueSeasonsDto } from "../dto/league-seasons.dto";
import { SeasonsDateAndSatesOfLeague } from "../interfaces/SeasonsDateAndSatesOfLeague";
export declare class LeagueService {
    private httpService;
    private readonly apiKey;
    private readonly apiUrl;
    constructor(httpService: HttpService);
    generalInfo({ leagueName }: GeneralInfoDto): import("rxjs").Observable<any>;
    overallStats({ leagueId, seasonId }: LeagueOverallStatsDto): import("rxjs").Observable<{}>;
    fixtures({ count, page, leagueId, seasonId, leagueResult }: LeagueFixtureDto): Promise<unknown>;
    detailStats({ leagueId, seasonId }: LeagueDetailStatsDto): import("rxjs").Observable<ReturnDetailStats[]>;
    generalStats({ leagueId, seasonId }: LeagueGeneralStatsDto): import("rxjs").Observable<ReturnGeneralStats[]>;
    search({ name }: SearchDto): import("rxjs").Observable<ReturnLeagueSearch>;
    private getTeamById;
    private getPlayerById;
    seasonsOfLeague({ leagueId }: SeasonsOfLeagueDto): import("rxjs").Observable<SeasonOfLeague[]>;
    pastChampions(seasonsIds: LeagueSeasonsDto[]): Promise<any[]>;
    leagueSeasonDates({ seasonId }: LeagueSeasonDatesDto): import("rxjs").Observable<SeasonsDateAndSatesOfLeague>;
    private convertToSeasonsDateOfLeagueInterface;
    private convertToGeneralInfoInterface;
    private curSeason;
    private convertToOverallStatsInterface;
    private convertToFixturesInterface;
    private convertToDetailStatsInterface;
    private convertToGeneralStatsInterface;
    private convertToSearchLeagueInterface;
    getLeagueSeasons({ leagueId }: LeagueSeasonDto): import("rxjs").Observable<any>;
    private convertToLeagueSeasonInterface;
    private convertToPlayerStatsInterface;
    private convertToSeasonsOfLeagueInterface;
}
